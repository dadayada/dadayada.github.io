{"version":3,"sources":["src/api.js","src/index.js"],"names":["getValue","fetch","then","resp","json","PATH_ID","App","containerId","points","intervalId","setInterval","value","length","y","slice","render","err","clearInterval","renderAxes","document","getElementById","innerHTML","Array","from","x","map","el","pathContainer","point","ind"],"mappings":"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","file":"src.42a821b3.map","sourceRoot":"..","sourcesContent":["export function getValue() {\n  return fetch(\"//dev.stearling.net/api/point\").then(resp => resp.json());\n}\n","import { getValue } from './api'\nimport './styles.css'\n\nconst PATH_ID = 'path'\n\nclass App {\n  constructor(containerId) {\n    this.containerId = containerId\n    this.points = []\n    const intervalId = setInterval(() => {\n      getValue().then(value => {\n        if (this.points.length >= 8) {\n          this.points = [value.y, ...this.points.slice(0, 7)]\n        } else {\n          this.points = [value.y, ...this.points]\n        }\n        this.render()\n      }, err => {\n        clearInterval(intervalId)\n        throw err\n      })\n    }, 1000)\n    this.renderAxes()\n  }\n\n  renderAxes() {\n    const container = document.getElementById(this.containerId)\n    container.innerHTML = `\n      <svg width=\"940\" height=\"680\">\n      <g>\n        <line x1=\"100\" x2=\"100\" y1=\"60\" y2=\"660\" stroke=\"black\" stroke-width=\"1\" />\n        <g>\n          ${Array.from([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], x => x).map(\n            el => `\n            <g>\n              <line x1=\"100\" x2=\"90\" y1=\"${660 - el * 60}\" y2=\"${660 -\n              el * 60}\" stroke=\"black\"/>\n              <text x=\"85\" y=\"${660 - el * 60 + 5}\" text-anchor=\"end\">\n                <tspan>${el * 10}</tspan>\n              </text>\n            </g>\n          `\n          )}\n        </g>\n      </g>\n      <g>   \n        <line\n          x1=\"100\"\n          x2=\"800\"\n          y1=660\n          y2=\"660\"\n          stroke=\"black\"\n          stroke-width=\"1\"\n        />\n        <g>\n          ${Array.from([0, 1, 2, 3, 4, 5, 6, 7], x => x).map(\n            el => `\n            <g>\n              <line x1=\"${100 + 50 * el}\" x2=\"${100 +\n              50 * el}\" y1=\"${660}\" y2=\"${670}\" stroke=\"black\"/>\n             ${\n               el === 7\n                 ? `<text x=\"${115 + el * 50}\" y=\"${680}\" text-anchor=\"end\">\n                   <tspan>now</tspan>\n                 </text>`\n                 : ''\n             }\n            </g>\n          `\n          )}\n        </g>\n      </g> \n      <g id=\"${PATH_ID}\"></g>\n    </svg>\n    `\n  }\n\n  render() {\n    const pathContainer = document.getElementById(PATH_ID)\n    const { points } = this\n    pathContainer.innerHTML = `\n      <path d=\"M450 ${660 - points[0] * 6} ${points\n      .slice(1)\n      .map(\n        (point, ind) => `L${400 - ind * 50} ${660 - point * 6}`\n      )}\" stroke=\"black\" stroke-width=\"1\" fill=\"none\"/>\n    `\n  }\n}\n\nnew App('app')\n"]}